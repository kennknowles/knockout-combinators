## Module shrink #######################################################
#
# Reduces values to a minimal counter-example.
#
# 
# Copyright (c) 2013 Quildreen "Sorella" Motta <quildreen@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

{ Generator, as-generator, transform:t } = require './generating'

{ round } = Math

to-char = String.from-char-code

is-upper = (a) ->/[A-Z]/.test a
is-lower = (a) -> /[a-z]/.test a
is-digit = (a) -> /[0-9]/.test a
is-space = (a) -> /\s/.test a


Nothing = {}


transform = (f, gen) --> gen |> t ->
                                  | it is Nothing => Nothing
                                  | otherwise     => f it
                         

shrinkable = (xs) -> as-generator ->
                                  | xs.length => xs.pop!
                                  | otherwise => Nothing

Num = (a) -> as-generator ->
                          | (round a) is 0 => Nothing
                          | otherwise      => a := a / 2

Int = (a) -> transform round, (Num a)


Bool = (a) -> shrinkable ([true, false].filter (isnt a))


Char = (a) -> do
              lowers = [\a \b \c].filter (-> is-lower a)
              if is-upper a => lowers.push a.to-lower-case!
              uppers = [\A \B \C].filter (-> is-upper a)
              digits = [\1 \2 \3].filter (-> is-digit a)
              spaces = [' ' '\n'].filter (-> is-space a)

              shrinkable (lowers ++ uppers ++ digits ++ spaces)
           
              
List = (a) -> do
              ...
              



exhaust = (x) ->
  r = []
  while (a = x.next!value) isnt Nothing => r.push a
  r


### -- Exports ---------------------------------------------------------
module.exports = { Nothing, Num, Int, Bool, Char, exhaust }
