[{"id":"check","name":"check","kind":"module","signatures":[],"text":"Tests if properties hold for N random value generations.\n\n\nCopyright (c) 2013 Quildreen \"Sorella\" Motta <quildreen@gmail.com>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","code":"","meta":{},"language":"LiveScript","file":"src/check.ls","line":26,"end-line":26},{"id":"check/g:Dependencies","name":"Dependencies","kind":"group","signatures":[],"text":"","code":"{ Base }           = require 'boo'\n{ values, reduce } = require 'prelude-ls'\n","meta":{},"parent":"check","language":"LiveScript","file":"src/check.ls","line":28,"end-line":30},{"id":"check/g:Aliases","name":"Aliases","kind":"group","signatures":[],"text":"","code":"frozen  = Object.freeze\n{round} = Math\n\n","meta":{},"parent":"check","language":"LiveScript","file":"src/check.ls","line":32,"end-line":35},{"id":"check/g:General-helpers","name":"General helpers","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"check","language":"LiveScript","file":"src/check.ls","line":37,"end-line":37},{"id":"check/g:General-helpers/percentage","name":"percentage","kind":"function","signatures":["Number, Number -> Number"],"text":"Computes the percentage of some N wrt some Total.\n","code":"percentage = (num, total) -> round (num / total) * 100\n\n","meta":{"internal":true},"parent":"check/g:General-helpers","language":"LiveScript","file":"src/check.ls","line":43,"end-line":45},{"id":"check/g:Helpers-for-handling-Results","name":"Helpers for handling Results","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"check","language":"LiveScript","file":"src/check.ls","line":47,"end-line":47},{"id":"check/g:Helpers-for-handling-Results/status","name":"status","kind":"function","signatures":["Result -> ResultStatus"],"text":"Retrieves a normalised Status tag for the Result.\n","code":"status = (result) ->\n  | result.ok is true  => \\passed\n  | result.ok is false => \\failed\n  | otherwise          => \\ignored\n\n","meta":{"internal":true},"parent":"check/g:Helpers-for-handling-Results","language":"LiveScript","file":"src/check.ls","line":53,"end-line":58},{"id":"check/g:Helpers-for-handling-Results/failed-p","name":"failed-p","kind":"function","signatures":["Result -> Bool"],"text":"Checks if a Result failed.\n","code":"failed-p = (result) -> result.ok is false\n\n","meta":{"internal":true},"parent":"check/g:Helpers-for-handling-Results","language":"LiveScript","file":"src/check.ls","line":64,"end-line":66},{"id":"check/g:Helpers-for-presenting-a-Report","name":"Helpers for presenting a Report","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"check","language":"LiveScript","file":"src/check.ls","line":68,"end-line":68},{"id":"check/g:Helpers-for-presenting-a-Report/describe-veredict","name":"describe-veredict","kind":"function","signatures":["Report -> String"],"text":"Provides a human-readable veredict of a test report.\n","code":"describe-veredict = (report) ->\n  passed      = report.passed.length\n  failed      = report.failed.length\n  all         = report.all.length\n  ignored     = report.ignored.length\n\n  switch report.veredict\n  | \\passed    => \"+ OK passed #{passed} tests.\"\n  | \\failed    => \"! Falsified after #{all - ignored} tests, #{failed} failed.\"\n  | \\abandoned => \"? Aborted after #{all} tests.\"\n  | otherwise  => \"/ Unknown veredict. Likely this test report lacks any data.\"\n\n","meta":{"internal":true},"parent":"check/g:Helpers-for-presenting-a-Report","language":"LiveScript","file":"src/check.ls","line":74,"end-line":86},{"id":"check/g:Helpers-for-presenting-a-Report/describe-ignored","name":"describe-ignored","kind":"function","signatures":["Report -> String"],"text":"Provides a human-readable description of the ignored tests, if they're\nabove a certain non-trivial threshold (50%).\n","code":"describe-ignored = (report) ->\n  ignored = report.ignored.length\n  ignored-pct = percentage ignored, report.all.length\n\n  if ignored-pct > 50 => \"#ignored (#{ignored-pct}%) tests ignored.\"\n  else                => ''\n\n","meta":{"internal":true},"parent":"check/g:Helpers-for-presenting-a-Report","language":"LiveScript","file":"src/check.ls","line":93,"end-line":100},{"id":"check/g:Helpers-for-presenting-a-Report/label-histogram","name":"label-histogram","kind":"function","signatures":["Report -> String"],"text":"Provides a human-readable histogram of the various classifications\nprovided for the test data.\n","code":"label-histogram = (report) ->\n  total = report.all.length\n  labels = [\"o #{percentage v.length, total}% - #k\" for k, v of report.labels]\n\n  if labels.length => \"> Collected test data:\\n    #{labels.join '\\n    '}\"\n  else             => ''\n\n","meta":{"internal":true},"parent":"check/g:Helpers-for-presenting-a-Report","language":"LiveScript","file":"src/check.ls","line":107,"end-line":114},{"id":"check/g:Helpers-for-presenting-a-Report/describe-failures","name":"describe-failures","kind":"function","signatures":["Report -> String"],"text":"Provides a human-readable description of the failures that happened.\n\n{label a.labels}\n{a.arguments.map arg .join '\\n  '}","code":"describe-failures = (report) ->\n  label = (as) -> \n    | as.length => \": The following labels were provided: #{JSON.stringify as}\"\n    | otherwise => ''\n   \n  arg = (a, n) -> \"  #n - #{a.value} (#{a.generator})\"\n  \n  errors = report.failed.map (a, n) -> \"\"\"\n                                       : Failure \\##{n + 1}\n                                       : The following arguments were provided:\n                                       \"\"\"\n  switch\n  | errors.join '' .trim! => errors.join '\\n---\\n'\n  | otherwise             => ''\n\n","meta":{"internal":true},"parent":"check/g:Helpers-for-presenting-a-Report","language":"LiveScript","file":"src/check.ls","line":120,"end-line":137},{"id":"check/g:Helper-data-structures","name":"Helper data structures","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"check","language":"LiveScript","file":"src/check.ls","line":139,"end-line":139},{"id":"check/g:Helper-data-structures/Report","name":"Report","kind":"object","signatures":["Base <| Report"],"text":"Gathers meta-data from a property test and provides ways of displaying\nthose data in an human-readable way.\n","code":"Report = Base.derive {\n","meta":{},"parent":"check/g:Helper-data-structures","language":"LiveScript","file":"src/check.ls","line":146,"end-line":147},{"id":"check/g:Helper-data-structures/Report/init","name":"init","kind":"function","signatures":["@this:Report* => Property -> this"],"text":"Initialises a Report instance.\n","code":"  init: (@property) ->\n    @passed   = []\n    @failed   = []\n    @ignored  = []\n    @all      = []\n    @labels   = {}\n    @veredict = null\n\n","meta":{},"parent":"check/g:Helper-data-structures/Report","language":"LiveScript","file":"src/check.ls","line":152,"end-line":160},{"id":"check/g:Helper-data-structures/Report/add","name":"add","kind":"function","signatures":["@this:Report* => Result -> ()"],"text":"Adds a single test result to the Report.\n","code":"  add: (result) ->\n    @all.push result\n    result.labels.map (a) ~> @labels.[]\"#a\".push result\n    switch status result\n    | \\passed  => @passed.push result\n    | \\failed  => @failed.push result\n    | \\ignored => @ignored.push result\n","meta":{},"parent":"check/g:Helper-data-structures/Report","language":"LiveScript","file":"src/check.ls","line":165,"end-line":172},{"id":"check/g:Helper-data-structures/Report/to-string","name":"to-string","kind":"function","signatures":["@this:Report* => () -> String"],"text":"Provides a human-readable presentation of this Report.\n\n{describe-veredict this} #{describe-ignored this}\n{label-histogram this}\n{describe-failures this}","code":"  to-string: ->\n    \"\"\"\n    \"\"\"\n}\n\n","meta":{},"parent":"check/g:Helper-data-structures/Report","language":"LiveScript","file":"src/check.ls","line":177,"end-line":185},{"id":"check/g:Checking-properties","name":"Checking properties","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"check","language":"LiveScript","file":"src/check.ls","line":187,"end-line":187},{"id":"check/g:Checking-properties/check","name":"check","kind":"function","signatures":["Number -> Property -> Report"],"text":"Runs a property repeatedly, until it holds more times than a given\nthreshold.\n\nIf the Property fails to hold for certain random inputs, or if the\nProperty ignores too many of the inputs, the test fails immediately\nand a Report describing the failure is returned.\n","code":"check = (max, property) -->\n  report     = Report.make property\n  ignored    = 0\n  should-run = true\n  while max and should-run\n    result = property.run!\n    report.add result\n\n    switch status result\n    | \\passed  => --max\n    | \\failed  => should-run = false\n    | \\ignored => if ++ignored > 1000 => should-run = false\n\n  report.veredict = | ignored > 1000 => \\abandoned\n                    | max > 0        => \\failed\n                    | otherwise      => \\passed\n  frozen report\n  \n\n\f","meta":{},"parent":"check/g:Checking-properties","language":"LiveScript","file":"src/check.ls","line":197,"end-line":216},{"id":"check/g:Exports","name":"Exports","kind":"group","signatures":[],"text":"","code":"module.exports = { check }\n","meta":{},"parent":"check","language":"LiveScript","file":"src/check.ls","line":218,"end-line":219},{"id":"data","name":"data","kind":"module","signatures":[],"text":"Core data generators.\n\n\nCopyright (c) 2013 Quildreen \"Sorella\" Motta <quildreen@gmail.com>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","code":"","meta":{},"language":"LiveScript","file":"src/data.ls","line":27,"end-line":27},{"id":"data/g:Dependencies","name":"Dependencies","kind":"group","signatures":[],"text":"","code":"{ choose-int, choose } = require './random'\n\n{ as-generator                   \\\n, choice, frequency, sequence    \\\n, size, label, transform, repeat } = require './generating'\n\n","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":29,"end-line":35},{"id":"data/g:Helpers","name":"Helpers","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":37,"end-line":37},{"id":"data/g:Helpers/join","name":"join","kind":"function","signatures":["[a] -> String"],"text":"Joins a list of things without a separator\n","code":"join = (.join '')\n\n","meta":{"internal":true},"parent":"data/g:Helpers","language":"LiveScript","file":"src/data.ls","line":43,"end-line":45},{"id":"data/g:Helpers/char","name":"char","kind":"function","signatures":["Number -> String"],"text":"Converts some character code to a String character.\n","code":"char = String.from-char-code\n\n","meta":{"internal":true},"parent":"data/g:Helpers","language":"LiveScript","file":"src/data.ls","line":51,"end-line":53},{"id":"data/g:Helpers/to-integer","name":"to-integer","kind":"function","signatures":["Number -> Int32"],"text":"Converts a Number to an Integer.\n","code":"to-integer = (n) -> n .|. 0\n\n","meta":{"internal":true},"parent":"data/g:Helpers","language":"LiveScript","file":"src/data.ls","line":59,"end-line":61},{"id":"data/g:Helpers/to-unsigned-integer","name":"to-unsigned-integer","kind":"function","signatures":["Number -> UInt32"],"text":"Converts a Number to an unsigned Integer.\n","code":"to-unsigned-integer = (n) -> n .>>>. 0\n\n","meta":{"internal":true},"parent":"data/g:Helpers","language":"LiveScript","file":"src/data.ls","line":67,"end-line":69},{"id":"data/g:Helpers/to-object","name":"to-object","kind":"function","signatures":["[String, a] -> { String -> a }"],"text":"Folds a list of pairs into an object.\n","code":"to-object = (as) -> as.reduce ((r, [k,v]) -> r <<< { \"#k\": v }), {}\n\n","meta":{"internal":true},"parent":"data/g:Helpers","language":"LiveScript","file":"src/data.ls","line":75,"end-line":77},{"id":"data/g:Forward-declarations","name":"Forward declarations","kind":"group","signatures":[],"text":"","code":"Any = as-generator!\n\n","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":79,"end-line":81},{"id":"data/g:Primitive-data-types","name":"Primitive data types","kind":"group","signatures":[],"text":"","code":"Null      = as-generator null\nUndefined = as-generator void\nBool      = choice true, false\nNum       = label 'num'  (as-generator (s) -> choose -s, s)\nByte      = label 'byte' (as-generator (_) -> choose 0, 255)\nChar      = label 'char' (transform char, Byte)\nStr       = label 'str'  (transform join, (repeat Char))\n\n","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":83,"end-line":91},{"id":"data/g:Specialised-numeric-types","name":"Specialised numeric types","kind":"group","signatures":[],"text":"","code":"Int      = label 'int' (transform to-integer, Num)\nUInt     = label 'uint' (transform to-unsigned-integer, Num)\nPositive = label 'positive' (as-generator (s) -> choose 1, s)\nNegative = label 'negative' (as-generator (s) -> choose -1, -s)\n\n","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":93,"end-line":98},{"id":"data/g:Specialised-textual-types","name":"Specialised textual types","kind":"group","signatures":[],"text":"","code":"NumChar      = label 'num-char' (transform char, -> choose-int 48, 57)\nUpperChar    = label 'upper-char' (transform char, -> choose-int 65, 90)\nLowerChar    = label 'lower-char' (transform char, -> choose-int 97, 122)\nAlphaChar    = frequency [1, UpperChar], [9, LowerChar]\nAlphaNumChar = frequency [1, NumChar], [9, AlphaChar]\nAlphaStr     = transform join, (repeat AlphaChar)\nNumStr       = transform join, (repeat NumChar)\nAlphaNumStr  = transform join, (repeat AlphaNumChar)\n\nId           = do\n               start = frequency [1, '_'], [2, '$'], [9, AlphaChar]\n               chars = frequency [1, NumChar], [9, start]\n               rest  = transform join, (repeat chars)\n               \n               label 'id' (transform join, (sequence start, rest))\n\n","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":100,"end-line":116},{"id":"data/g:Container-data-types","name":"Container data types","kind":"group","signatures":[],"text":"","code":"List = (...as) -> repeat (choice ...as)\nMap  = (...as) -> transform to-object, (repeat (sequence Id, (choice ...as)))\n\n","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":118,"end-line":121},{"id":"data/g:Umbrella-type-unions","name":"Umbrella type unions","kind":"group","signatures":[],"text":"TODO: Date, RegExp, Truthy","code":"Nothing = choice Null, Undefined\nFalsy   = choice Nothing, false, 0, ''\nAny  <<<< choice Nothing, Bool, Num, Str, (List Any), (Map Any)\n\n\n\f","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":123,"end-line":129},{"id":"data/g:Exports","name":"Exports","kind":"group","signatures":[],"text":"Primitives\nNumbers\nStrings\nConstainers\nUmbrella","code":"module.exports = {\n  Null, Undefined, Bool, Num, Byte, Char, Str\n\n  Int, UInt, Positive, Negative\n\n  NumChar, UpperChar, LowerChar, AlphaChar, AlphaNumChar, AlphaStr,\n  NumStr, AlphaNumStr, Id\n\n  List, Map\n\n  Nothing, Falsy, Any\n}\n","meta":{},"parent":"data","language":"LiveScript","file":"src/data.ls","line":131,"end-line":148},{"id":"generating","name":"generating","kind":"module","signatures":[],"text":"The basis for generating *everything*.\n\n\nCopyright (c) 2013 Quildreen \"Sorella\" Motta <quildreen@gmail.com>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","code":"","meta":{},"language":"LiveScript","file":"src/generating.ls","line":27,"end-line":27},{"id":"generating/g:Dependencies","name":"Dependencies","kind":"group","signatures":[],"text":"","code":"{ Base, derive }          = require 'boo'\n{ concat-map, replicate } = require 'prelude-ls'\n{ pick-one, choose-int }  = require './random'\n\n","meta":{},"parent":"generating","language":"LiveScript","file":"src/generating.ls","line":29,"end-line":33},{"id":"generating/g:Interfaces","name":"Interfaces","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"generating","language":"LiveScript","file":"src/generating.ls","line":35,"end-line":35},{"id":"generating/g:Interfaces/t:Value-a","name":"Value a","kind":"type","signatures":["{ \"generator\" -> Generator a\n; \"value\"     -> a }"],"text":"","code":"","meta":{},"parent":"generating/g:Interfaces","language":"LiveScript","file":"src/generating.ls","line":41,"end-line":41},{"id":"generating/g:Helpers","name":"Helpers","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"generating","language":"LiveScript","file":"src/generating.ls","line":43,"end-line":43},{"id":"generating/g:Helpers/callable-p","name":"callable-p","kind":"function","signatures":["a -> Bool"],"text":"Checks if something is callable.\n","code":"callable-p = (a) -> typeof a is 'function'\n\n","meta":{"internal":true},"parent":"generating/g:Helpers","language":"LiveScript","file":"src/generating.ls","line":49,"end-line":51},{"id":"generating/g:Helpers/generator-p","name":"generator-p","kind":"function","signatures":["a -> Bool"],"text":"Checks if something is a `Generator`\n","code":"generator-p = (a) -> 'next' of (Object a)\n\n","meta":{"internal":true},"parent":"generating/g:Helpers","language":"LiveScript","file":"src/generating.ls","line":57,"end-line":59},{"id":"generating/g:Helpers/compute","name":"compute","kind":"function","signatures":["a -> Generator a -> a","(a -> b) -> Generator b -> b"],"text":"Computes a value lifted to a `Generator`.\n","code":"compute = (a, gen) ->\n  | callable-p a => a gen.size\n  | otherwise    => a\n\n","meta":{"internal":true},"parent":"generating/g:Helpers","language":"LiveScript","file":"src/generating.ls","line":66,"end-line":70},{"id":"generating/g:Working-with-Values","name":"Working with Values","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"generating","language":"LiveScript","file":"src/generating.ls","line":72,"end-line":72},{"id":"generating/g:Working-with-Values/make-value","name":"make-value","kind":"function","signatures":["a -> Generator a -> Value a"],"text":"Constructs a `Value` type.\n","code":"make-value = (value, gen) -->\n  generator : gen\n  value     : value\n","meta":{},"parent":"generating/g:Working-with-Values","language":"LiveScript","file":"src/generating.ls","line":77,"end-line":80},{"id":"generating/g:Working-with-Values/value","name":"value","kind":"function","signatures":["Generator a -> a"],"text":"Executes a `Generator` and extracts the generated value.\n","code":"value = (ctx, gen) --> ((as-generator gen).next.call ctx).value\n\n","meta":{},"parent":"generating/g:Working-with-Values","language":"LiveScript","file":"src/generating.ls","line":85,"end-line":87},{"id":"generating/g:Core-implementation","name":"Core implementation","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"generating","language":"LiveScript","file":"src/generating.ls","line":89,"end-line":89},{"id":"generating/g:Core-implementation/Generator","name":"Generator","kind":"object","signatures":["Base <| Generator a"],"text":"The base generator logic.\n","code":"Generator = Base.derive {\n","meta":{},"parent":"generating/g:Core-implementation","language":"LiveScript","file":"src/generating.ls","line":94,"end-line":95},{"id":"generating/g:Core-implementation/Generator/size","name":"size","kind":"data","signatures":["Number"],"text":"A hint for controlling the generated value's complexity.\n","code":"  size: 10\n","meta":{},"parent":"generating/g:Core-implementation/Generator","language":"LiveScript","file":"src/generating.ls","line":100,"end-line":101},{"id":"generating/g:Core-implementation/Generator/next","name":"next","kind":"function","signatures":["() -> Value a"],"text":"Generates a new random value.\n","code":"  next: -> ...\n","meta":{},"parent":"generating/g:Core-implementation/Generator","language":"LiveScript","file":"src/generating.ls","line":106,"end-line":107},{"id":"generating/g:Core-implementation/Generator/shrink","name":"shrink","kind":"function","signatures":["a -> [a]"],"text":"Continually shrinks a value into the most minimal case within the\ncontext of this generator.\n","code":"  shrink: (a) -> ...\n","meta":{},"parent":"generating/g:Core-implementation/Generator","language":"LiveScript","file":"src/generating.ls","line":113,"end-line":114},{"id":"generating/g:Core-implementation/Generator/to-string","name":"to-string","kind":"function","signatures":["() -> String"],"text":"Returns a friendly representation of this generator.\n\nBy convention (of this library), the friendly names are surrounded\nby angular brackets to identify them as generators easily.\n","code":"  to-string: -> '<Generator>'\n}\n\n","meta":{},"parent":"generating/g:Core-implementation/Generator","language":"LiveScript","file":"src/generating.ls","line":122,"end-line":125},{"id":"generating/g:Combinators-for-constructing-Generators","name":"Combinators for constructing Generators","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"generating","language":"LiveScript","file":"src/generating.ls","line":127,"end-line":127},{"id":"generating/g:Combinators-for-constructing-Generators/as-generator","name":"as-generator","kind":"function","signatures":["Generator a -> Generator a"],"text":"Lifts a regular value to a `Generator`.\n\nThis is used by all combinators to allow users to pass regular values\nas if they were proper `Generators`, making the API cleaner.\n","code":"as-generator = (a) -> \n  | generator-p a  => a\n  | otherwise      => do\n                      Generator.derive {\n                        to-string: -> \"<#a>\"\n                        next: -> make-value (compute a, this), this\n                      }\n\n","meta":{},"parent":"generating/g:Combinators-for-constructing-Generators","language":"LiveScript","file":"src/generating.ls","line":135,"end-line":143},{"id":"generating/g:Combinators-for-constructing-Generators/choice","name":"choice","kind":"function","signatures":["Generator a... -> Generator b"],"text":"Alternatively generate values from one of the given generators at\nrandom.\n\nThe values generated from `choice` generators are uniformly\ndistributed. You can use the `frequency` generator for weighted random\nchoices.\n","code":"choice = (...as) -> do\n                    Generator.derive {\n                      to-string: -> \"<Choice (#{as})>\"\n                      next: -> do\n                               gen = pick-one as\n                               make-value (value this, gen), (as-generator gen)\n                    }\n\n","meta":{},"parent":"generating/g:Combinators-for-constructing-Generators","language":"LiveScript","file":"src/generating.ls","line":153,"end-line":161},{"id":"generating/g:Combinators-for-constructing-Generators/frequency","name":"frequency","kind":"function","signatures":["(Number, Generator a)... -> Generator b"],"text":"Constructs a new `Generator` that alternatively chooses between one of\nthe given `Generator`s using a weighted random selection.\n","code":"frequency = (...as) -> do\n                       gs = concat-map (([w,g]) -> replicate w, g), as\n                       representation = ([w, g]) -> w + ':' + g\n\n                       (choice ...gs).derive {\n                         to-string: -> \"<Frequency (#{as.map representation}>\"\n                       }\n\n","meta":{},"parent":"generating/g:Combinators-for-constructing-Generators","language":"LiveScript","file":"src/generating.ls","line":167,"end-line":175},{"id":"generating/g:Combinators-for-constructing-Generators/sequence","name":"sequence","kind":"function","signatures":["Generator a... -> Generator b"],"text":"Constructs a new `Generator` that yields the combination of several\n`Generator`s.\n","code":"sequence = (...as) -> do\n                      Generator.derive {\n                        to-string: -> \"<Sequence (#{gs})>\"\n                        next: -> make-value (as.map (value this)), this\n                      }\n\n","meta":{},"parent":"generating/g:Combinators-for-constructing-Generators","language":"LiveScript","file":"src/generating.ls","line":181,"end-line":187},{"id":"generating/g:Combinators-for-constructing-Generators/sized","name":"sized","kind":"function","signatures":["Number -> Generator a -> Generator b"],"text":"Constructs a new `Generator` with a new complexity `size` hint.\n","code":"sized = (n, gen) --> (as-generator gen).derive { size: n }\n\n","meta":{},"parent":"generating/g:Combinators-for-constructing-Generators","language":"LiveScript","file":"src/generating.ls","line":192,"end-line":194},{"id":"generating/g:Combinators-for-constructing-Generators/label","name":"label","kind":"function","signatures":["String -> Generator a -> Generator a"],"text":"Constructs a new, custom labelled, `Generator`.\n","code":"label = (name, gen) --> (as-generator gen).derive { to-string: -> \"<#name>\" }\n\n","meta":{},"parent":"generating/g:Combinators-for-constructing-Generators","language":"LiveScript","file":"src/generating.ls","line":199,"end-line":201},{"id":"generating/g:Combinators-for-constructing-Generators/transform","name":"transform","kind":"function","signatures":["(a -> b) -> Generator a -> Generator b"],"text":"Constructs a new `Generator` that transforms the value of another\n`Generator`.\n","code":"transform = (f, gen) -> do\n                        g = as-generator gen\n                        g.derive {\n                          next: -> make-value (f (value this, g)), this\n                        }\n\n","meta":{},"parent":"generating/g:Combinators-for-constructing-Generators","language":"LiveScript","file":"src/generating.ls","line":207,"end-line":213},{"id":"generating/g:Combinators-for-constructing-Generators/repeat","name":"repeat","kind":"function","signatures":["Generator a -> Generator b"],"text":"Constructs a new `Generator` that repeats a given `Generator`.\n","code":"repeat = (gen) -> do\n                  gen := as-generator gen\n                  gen.derive {\n                    to-string: -> \"<Repeat #{gen}>\"\n                    next: -> do\n                             range  = [1 to (choose-int 0, @size)]\n                             make-value (range.map ~> value this, gen), this\n                  }\n\n\n\n\f","meta":{},"parent":"generating/g:Combinators-for-constructing-Generators","language":"LiveScript","file":"src/generating.ls","line":218,"end-line":229},{"id":"generating/g:Exports","name":"Exports","kind":"group","signatures":[],"text":"","code":"module.exports = {\n  make-value\n  value\n\n  Generator\n  \n  as-generator\n  choice\n  frequency\n  sequence\n  sized\n  label\n  transform\n  repeat\n}\n","meta":{},"parent":"generating","language":"LiveScript","file":"src/generating.ls","line":231,"end-line":246},{"id":"index","name":"index","kind":"module","signatures":[],"text":"The entry-point for Claire.\n\n\nCopyright (c) 2013 Quildreen \"Sorella\" Motta <quildreen@gmail.com>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","code":"","meta":{},"language":"LiveScript","file":"src/index.ls","line":27,"end-line":27},{"id":"index/g:Helpers","name":"Helpers","kind":"group","signatures":[],"text":"","code":"merge = (...as) -> as.reduce (<<<)\n\n\n\f","meta":{},"parent":"index","language":"LiveScript","file":"src/index.ls","line":29,"end-line":32},{"id":"index/g:Exports","name":"Exports","kind":"group","signatures":[],"text":"","code":"module.exports = merge do\n                       * { for-all } = require './property'\n                       * require './generating'\n                       * require './check'\n                       * data: require './data'\n","meta":{},"parent":"index","language":"LiveScript","file":"src/index.ls","line":34,"end-line":39},{"id":"property","name":"property","kind":"module","signatures":[],"text":"Defines how to generate and test properties.\n\n\nCopyright (c) 2013 Quildreen \"Sorella\" Motta <quildreen@gmail.com>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","code":"","meta":{},"language":"LiveScript","file":"src/property.ls","line":27,"end-line":27},{"id":"property/g:Dependencies","name":"Dependencies","kind":"group","signatures":[],"text":"","code":"{ Base } = require 'boo'\n\n","meta":{},"parent":"property","language":"LiveScript","file":"src/property.ls","line":29,"end-line":31},{"id":"property/g:Aliases","name":"Aliases","kind":"group","signatures":[],"text":"","code":"frozen = Object.freeze\n","meta":{},"parent":"property","language":"LiveScript","file":"src/property.ls","line":33,"end-line":34},{"id":"property/g:Helpers","name":"Helpers","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"property","language":"LiveScript","file":"src/property.ls","line":36,"end-line":36},{"id":"property/g:Helpers/values","name":"values","kind":"function","signatures":["[Value a] -> [a]"],"text":"Extracts the values from a list of generated arguments","code":"values = (.map (.value))\n","meta":{},"parent":"property/g:Helpers","language":"LiveScript","file":"src/property.ls","line":40,"end-line":41},{"id":"property/g:Helpers/valid-p","name":"valid-p","kind":"function","signatures":["[a] -> Property -> Bool"],"text":"Checks if a property is valid for the given arguments.","code":"valid-p = (args, prop) -->\n  | prop.implications.length is 0 => true\n  | otherwise                     => prop.implications.some (f) -> f ...(values args)\n\n","meta":{},"parent":"property/g:Helpers","language":"LiveScript","file":"src/property.ls","line":45,"end-line":49},{"id":"property/g:Helpers/classify","name":"classify","kind":"function","signatures":["[a] -> Property -> [String]"],"text":"Yields a list of classifications for the given arguments.","code":"classify = (args, prop) -->\n  (prop.classifiers.map (f) -> f ...(values args)).filter (!~= null)\n\n","meta":{},"parent":"property/g:Helpers","language":"LiveScript","file":"src/property.ls","line":53,"end-line":56},{"id":"property/g:Helpers/verify","name":"verify","kind":"function","signatures":["[a] -> Property -> Bool"],"text":"Verifies if the property's invariant's hold for the arguments.","code":"verify = (args, prop) -->\n  !!(prop.invariant ...(values args))\n","meta":{},"parent":"property/g:Helpers","language":"LiveScript","file":"src/property.ls","line":60,"end-line":62},{"id":"property/g:Helpers/invalidate","name":"invalidate","kind":"function","signatures":["[a] -> Property -> Result"],"text":"Invalidates the property for the given arguments (they're not valid).","code":"invalidate = (args, prop) -->\n  make-result args, [], null\n\n","meta":{},"parent":"property/g:Helpers","language":"LiveScript","file":"src/property.ls","line":66,"end-line":69},{"id":"property/g:Helpers/apply-property","name":"apply-property","kind":"function","signatures":["[a] -> Property -> Result"],"text":"Applies a property to some arguments.","code":"apply-property = (args, prop) -->\n  | valid-p args, prop => make-result args, (classify args, prop), (verify args, prop)\n  | otherwise          => invalidate args, prop\n","meta":{},"parent":"property/g:Helpers","language":"LiveScript","file":"src/property.ls","line":73,"end-line":76},{"id":"property/g:Helpers/make-result","name":"make-result","kind":"function","signatures":["[a] -> [String] -> Maybe Bool -> Result"],"text":"Constructs a Result object.","code":"make-result = (args, labels, ok) -->\n  ok        : ok\n  labels    : labels\n  arguments : args\n","meta":{},"parent":"property/g:Helpers","language":"LiveScript","file":"src/property.ls","line":80,"end-line":84},{"id":"property/g:Core-implementation","name":"Core implementation","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"property","language":"LiveScript","file":"src/property.ls","line":86,"end-line":86},{"id":"property/g:Core-implementation/Property","name":"Property","kind":"object","signatures":["Base <| Property"],"text":"Represents a property that can be verified against a list of randomly\ngenerated arguments.\n","code":"Property = Base.derive {","meta":{},"parent":"property/g:Core-implementation","language":"LiveScript","file":"src/property.ls","line":92,"end-line":92},{"id":"property/g:Core-implementation/Property/init","name":"init","kind":"function","signatures":["@this:Property => [Gen a] -> this*"],"text":"Initialises a Property instance's for the first time.","code":"  init: (args) ->\n    @arguments    = frozen args or []\n    @classifiers  = frozen []\n    @implications = frozen []\n    this\n","meta":{},"parent":"property/g:Core-implementation/Property","language":"LiveScript","file":"src/property.ls","line":96,"end-line":101},{"id":"property/g:Core-implementation/Property/invariant","name":"invariant","kind":"function","signatures":["(a... -> Bool) -> Bool"],"text":"The invariant that should hold for this property.","code":"  invariant: -> ...\n    ","meta":{},"parent":"property/g:Core-implementation/Property","language":"LiveScript","file":"src/property.ls","line":105,"end-line":106},{"id":"property/g:Core-implementation/Property/satisfy","name":"satisfy","kind":"function","signatures":["@Property => (a... -> Bool) -> Property"],"text":"Yields a new property with the given invariant.","code":"  satisfy:  (f) -> @derive { invariant: f }\n","meta":{},"parent":"property/g:Core-implementation/Property","language":"LiveScript","file":"src/property.ls","line":110,"end-line":111},{"id":"property/g:Core-implementation/Property/classify","name":"classify","kind":"function","signatures":["@Property => (a... -> Maybe b) -> Property"],"text":"Yields a new property that provides additional classification for\nthe arguments.","code":"  classify: (f) -> @derive { classifiers: @classifiers ++ [f] }\n","meta":{},"parent":"property/g:Core-implementation/Property","language":"LiveScript","file":"src/property.ls","line":116,"end-line":117},{"id":"property/g:Core-implementation/Property/given","name":"given","kind":"function","signatures":["@Property => (a... -> Bool) -> Property"],"text":"Yields a new property that only holds when additional implications\nhold for the generated arguments.","code":"  given:    (f) -> @derive { implications: @implications ++ [f] }\n","meta":{},"parent":"property/g:Core-implementation/Property","language":"LiveScript","file":"src/property.ls","line":122,"end-line":123},{"id":"property/g:Core-implementation/Property/run","name":"run","kind":"function","signatures":["@Property => () -> Result"],"text":"Returns the `Result` of applying the property to randomly generated\narguments once.","code":"  run: -> apply-property (@arguments.map (g) -> g.next!), this\n}\n\n","meta":{},"parent":"property/g:Core-implementation/Property","language":"LiveScript","file":"src/property.ls","line":128,"end-line":131},{"id":"property/g:Core-implementation/for-all","name":"for-all","kind":"function","signatures":["Gen a... -> Property"],"text":"Sugar for constructing a new `Property` for a series of given argument\nspecifications.","code":"for-all = (...as) -> Property.make as\n\n\n\f","meta":{},"parent":"property/g:Core-implementation","language":"LiveScript","file":"src/property.ls","line":136,"end-line":139},{"id":"property/g:Exports","name":"Exports","kind":"group","signatures":[],"text":"","code":"module.exports = { Property, for-all }\n","meta":{},"parent":"property","language":"LiveScript","file":"src/property.ls","line":141,"end-line":142},{"id":"primitives","name":"primitives","kind":"module","signatures":[],"text":"Base for pseudo-random stuff.\n\n\nCopyright (c) 2013 Quildreen \"Sorella\" Motta <quildreen@gmail.com>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","code":"","meta":{},"language":"LiveScript","file":"src/random.ls","line":27,"end-line":27},{"id":"primitives/g:Aliases","name":"Aliases","kind":"group","signatures":[],"text":"","code":"{ floor, random } = Math\n\n","meta":{},"parent":"primitives","language":"LiveScript","file":"src/random.ls","line":29,"end-line":31},{"id":"primitives/g:Numeric-randomness","name":"Numeric randomness","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"primitives","language":"LiveScript","file":"src/random.ls","line":33,"end-line":33},{"id":"primitives/g:Numeric-randomness/choose","name":"choose","kind":"function","signatures":["Number, Number -> Number"],"text":"Picks a random number between `[a, b[`.\n","code":"choose = (a, b) -> (random! * (b - a)) + a\n","meta":{},"parent":"primitives/g:Numeric-randomness","language":"LiveScript","file":"src/random.ls","line":38,"end-line":39},{"id":"primitives/g:Numeric-randomness/choose-int","name":"choose-int","kind":"function","signatures":["Number, Number -> Integer"],"text":"Picks a random integer between `[a, b[`\n","code":"choose-int = (a, b) -> floor (choose a, b)\n\n","meta":{},"parent":"primitives/g:Numeric-randomness","language":"LiveScript","file":"src/random.ls","line":44,"end-line":46},{"id":"primitives/g:Collection-randomness","name":"Collection randomness","kind":"group","signatures":[],"text":"","code":"","meta":{},"parent":"primitives","language":"LiveScript","file":"src/random.ls","line":48,"end-line":48},{"id":"primitives/g:Collection-randomness/pick-one","name":"pick-one","kind":"function","signatures":["[a] -> a"],"text":"Picks an element of a sequence at random.\n","code":"pick-one = (as) -> as[choose-int 0, as.length]\n\n\n\f","meta":{},"parent":"primitives/g:Collection-randomness","language":"LiveScript","file":"src/random.ls","line":53,"end-line":56},{"id":"primitives/g:Exports","name":"Exports","kind":"group","signatures":[],"text":"","code":"module.exports = { choose, choose-int, pick-one }\n","meta":{},"parent":"primitives","language":"LiveScript","file":"src/random.ls","line":58,"end-line":59}]