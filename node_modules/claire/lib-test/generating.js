(function(){
  var keys, ref$, asGenerator, Generator, choice, frequency, sequence, recursive, sized, label, transform, repeat, forAll, assert, _, o, toString$ = {}.toString;
  require('es5-shim');
  keys = require('prelude-ls').keys;
  ref$ = require('../lib/generating'), asGenerator = ref$.asGenerator, Generator = ref$.Generator, choice = ref$.choice, frequency = ref$.frequency, sequence = ref$.sequence, recursive = ref$.recursive, sized = ref$.sized, label = ref$.label, transform = ref$.transform, repeat = ref$.repeat;
  forAll = require('../lib').forAll;
  assert = require('assert');
  _ = require('../lib/data');
  o = it;
  describe('{M} Generating', function(){
    o('λ as-generator<a>', function(){
      var g;
      g = asGenerator('a');
      assert.equal(g.toString(), '<a>');
      return forAll(g).satisfy((function(it){
        return it === 'a';
      })).asTest();
    });
    o('λ as-generator<Gen a>', function(){
      var g;
      g = asGenerator(Generator);
      return assert.equal(g, Generator);
    });
    o('λ choice<a...>', function(){
      return forAll(choice('a', 'b')).satisfy(function(it){
        return it == 'a' || it == 'b';
      }).classify(function(it){
        return it;
      }).asTest();
    });
    o('λ frequency<a...>', function(){
      return forAll(frequency([1, 'a'], [5, 'b'])).satisfy(function(it){
        return it == 'a' || it == 'b';
      }).classify(function(it){
        return it;
      }).asTest();
    });
    o('λ sequence<a,b>', function(){
      return forAll(sequence('a', 'b')).satisfy(function(arg$){
        var a, b;
        a = arg$[0], b = arg$[1];
        return a === 'a' && b === 'b';
      }).asTest();
    });
    o('λ recursive<a>', function(){
      var a;
      a = sequence('a', recursive(function(n){
        switch (false) {
        case n !== 0:
          return 'a';
        default:
          return a;
        }
      }));
      return forAll(sized(function(){
        return 20;
      }, a)).satisfy(function(it){
        return (it + "").replace(/,/g, '').length === 6;
      }).asTest();
    });
    o('λ sized', function(){
      return forAll(sized(function(){
        return 5;
      }, choice(_.Num, _.Str, _.Array(_.Int), _.Object(_.Int)))).satisfy(function(it){
        switch (toString$.call(it).slice(8, -1)) {
        case 'Number':
          return -5 <= it && it < 5;
        case 'String':
          return it.length < 5;
        case 'Array':
          return it.length < 5;
        case 'Object':
          return keys(it).length < 5;
        }
      }).classify((function(it){
        return toString$.call(it).slice(8, -1);
      })).asTest();
    });
    o('λ label', function(){
      var g;
      g = label('a', 'b');
      assert.equal(g.toString(), '<a>');
      return forAll(g).satisfy((function(it){
        return it === 'b';
      })).asTest();
    });
    o('λ transform', function(){
      return forAll(transform(function(it){
        return it.toUpperCase();
      }, 'a')).satisfy((function(it){
        return it === 'A';
      })).asTest();
    });
    return o('λ repeat', function(){
      return forAll(repeat('a')).given(function(it){
        return it.length > 0;
      }).satisfy(function(it){
        return it.every((function(it){
          return it === 'a';
        }));
      }).asTest();
    });
  });
}).call(this);
